from __future__ import annotations

from typing import TYPE_CHECKING

import pytest
import retro_data_structures.enums.echoes as _echoes_enums
import retro_data_structures.enums.prime as _prime_enums

from retro_data_structures.formats import script_object
from retro_data_structures.formats.script_layer import SCLY
from retro_data_structures.formats.script_object import InstanceId
from retro_data_structures.game_check import Game

if TYPE_CHECKING:
    from retro_data_structures.formats.mlvl import Area, Mlvl


@pytest.fixture()
def prime1_scly_raw() -> bytes:
    return (
        b"SCLY\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\t@\x00\x00\x00\x00\x17\x0f\x00\x00\x00\xa7"
        b"\x007\x00\x02\x00\x00\x00\x00\x00\x00\x00#Spawn point\x00C!\xf1-\xc4\xb5\x86!B\xabY?\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\xc33\x81\xd0\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"
        b"\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00N\x00\x00"
        b"\x00-\x007\x00\x04\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x01\x01\x00\x00\x00\x01?\x80"
        b"\x00\x00\x00\x00\x00\x00?\x80\x00\x00?\x80\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x04\x00"
        b"\x00\x00_\x007\x00\t\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x07\x007\x00\x01\x00\x00"
        b"\x00\tTrigger\x00C&iY\xc4\xb7\xa8\x1dB\xb5\x7f\x8eB;j\x80B;j\x80A\xc7\xe7p\x00\x00\x00\x04"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x0b\x00\x00\x00K\x007\x00\x01\x00\x00"
        b"\x00\x02\x00\x00\x00\x07\x00\x00\x00\t\x007\x00\x0b\x00\x00\x00\t\x00\x00\x00\x03\x007\x00"
        b'\x0b\x00\x00\x00\x07Dock\x00\x01C"\x13W\xc4\xb3c`B\xad\x08\xd0?\xd2\xf2\x00@\x00\x00\x00?su'
        b"\x00\x00\x00\x00\x00\x00\x00\x007\x01]\x00\x00\x00\x8b\x007\x00\n\x00\x00\x00\x00\x00\x00"
        b"\x00 RoomAcoustics-component\x00\x01\x00\x00\x00u\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x01\x00>\xcc\xcc\xcd=\xcc\xcc\xcd>\xe6ff>\x99\x99\x9a?\x19"
        b"\x99\x9a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x01\x11"
        b"\x007\x00\x0b\x00\x00\x00\x02\x00\x00\x00\x08\x00\x00\x00\x07\x007\x00\x01\x00\x00\x00\x02"
        b'\x00\x00\x00\x05\x007\x00\x01\x00\x00\x00\x0eDoor_Area Morphball\x00C"\x13W\xc4\xb3c`B\xab'
        b"\x18\x95\x00\x00\x00\x00\x80\x00\x00\x00B\xb4\x00\x00?\x80\x00\x00?\x80\x00\x00?\x80\x00"
        b"\x00\x1f\x9d\xa8X\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x0e\x00\x00\x00\x0e\x01?\x80"
        b"\x00\x00\x00\x00\x00\x00?\x80\x00\x00A\xa0\x00\x00?\x80\x00\x00?\x80\x00\x00?\x80\x00\x00?"
        b"\x80\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x01\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff"
        b"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01?\x80\x00\x00?"
        b"\x80\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x0f\x00\x00\x00?\x80\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01>\x80\x00\x00\x01\x02\x00\x00"
        b"\x00R\x007\x00\x14\x00\x00\x00\x00\x00\x00\x00\rWaypoint\x00C\x10\x88\xb5\xc4\xba\x9d"
        b"\x9aB\xa8;:\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x01?\x80\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x005\x00\x00\x00O\x007\x00\x15\x00\x00\x00\x01\x00\x00\x00"
        b"\x00\x00\x00\x00\x01\x007\x00\x14\x00\x00\x00\x08Distance Fog\x00\x00\x00\x00\x01?V\xd6"
        b"\xdc?\x80\x00\x00?}\xfe\x00\x00\x00\x00\x00@\xa0\x00\x00B\xd2\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01B\x00\x00\x00Q\x007\x00\x16\x00\x00\x00\x00\x00"
        b"\x00\x00\x06Point Of Interest - Holo Scan 1\x00C1\x9fM\xc4\xb7$\xe2B\xb6Mw\x00\x00\x00"
        b"\x00\x80\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\xfa\xf5\xa8\x87\x00\x00\x00"
        b"\x00B\x00\x00\x00Q\x007\x00\x17\x00\x00\x00\x00\x00\x00\x00\x06Point Of Interest - Holo Scan 2"
        b"\x00C\x17d\xdc\xc4\xb7d\xfaB\xb3\xb80\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x01"
        b"\x00\x00\x00\x01|a\xda)\x00\x00\x00\x00B\x00\x00\x00Q\x007\x00\x18\x00\x00\x00\x00\x00\x00"
        b"\x00\x06Point Of Interest - Holo Scan 3\x00C\x16\x88\x82\xc4\xb6\xcb\xedB\xb2-\xa2\x00\x00"
        b"\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\xb7=\t\x8c\x00\x00\x00\x00"
        b"\x11\x00\x00\x01A\x007\x00\x19\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\r\x007\x00 "
        b"\x00\x00\x00\x01\x00\x00\x00\x01\x007\x00\x1a\x00\x00\x00\x01\x00\x00\x00\x14\x007\x00"
        b"\x1c\x00\x00\x00\x01\x00\x00\x00\r\x007\x00\x1e\x00\x00\x00\x12P_Bomb-component-component"
        b"\x00C#\x00\xf6\xc4\xb6\xc8\x19B\xac\xfcv\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00?"
        b"\x80\x00\x00?\x80\x00\x00?\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x01\x00"
        b'\x00\x00\x01B\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"}qf\x0b[\xbf\x9e\x00\x00\x00'
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x0e\x01?\x80\x00\x00\x00\x00\x00\x00?"
        b"\x80\x00\x00A\xa0\x00\x00?\x80\x00\x00?\x80\x00\x00?\x80\x00\x00?\x80\x00\x00\x01\x00"
        b"\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x04\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01A\x90[l\xff\xff\xff\xff\xff\xff"
        b"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01?\x80\x00\x00?\x80\x00\x00\x00\x00\x00\x03"
        b"\x00\x00\x00\x00\x00\x0f\x00\x00\x00?\x80\x00\x00\x01\x00\x00\x00\x00\r\xeb\x94V\x13\x00"
        b"\x00\x00'\x007\x00\x1a\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x007\x00\x19\x00"
        b"\x00\x00\x03Memory Relay\x00\x00\x00\t\x00\x00\x00h\x007\x00\x1c\x00\x00\x00\x00\x00\x00"
        b"\x00\x14powerup sound-component\x00C#]L\xc4\xb7/VB\xac\xfcv\x00\x00\x00\x00\x80\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00u\x01BH\x00\x00>L\xcc\xcd\x00\x00\x00\x00\x00\x00\x00\x14"
        b"\x00\x00\x00\x7f\x00\x00\x00\x7f\x00\x00\x00@\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"a\x00\x00\x00@\x007\x00\x1d\x00\x00\x00\x00\x00\x00\x00\tStreamedAudio FadeIn/Out Long\x00"
        b"\x01SW\x00\x00@\xa0\x00\x00@\x00\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x01\x15\x00\x00"
        b"\x000\x007\x00\x1e\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x05\x007\x00\x1d\x00\x00\x00"
        b"\x02Relay - Fade Out Music\x00\x01\x05\x00\x00\x009\x007\x00\x1f\x00\x00\x00\x01\x00\x00"
        b"\x00\t\x00\x00\x00\x07\x007\x00\x1d\x00\x00\x00\x06Timer - Fade In Music\x00?\x80\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x01\x15\x00\x00\x00O\x007\x00 \x00\x00\x00\x04\x00\x00\x00\t\x00"
        b"\x00\x00\x0b\x007\x00\x1f\x00\x00\x00\t\x00\x00\x00\x07\x007\x00$\x00\x00\x00\t\x00\x00"
        b'\x00\x0b\x007\x00#\x00\x00\x00\t\x00\x00\x00\x0b\x007\x00"\x00\x00\x00\x02Relay Post Pickup'
        b"\x00\x01\x17\x00\x00\x00)\x007\x00!\x00\x00\x00\x00\x00\x00\x00\x06HUDMemo Pickup\x00?"
        b'\x80\x00\x00\x01\x00\x00\x00\x01\xc73\x8e\x0e\x01\x05\x00\x00\x000\x007\x00"\x00\x00\x00'
        b"\x01\x00\x00\x00\t\x00\x00\x00\x14\x007\x00%\x00\x00\x00\x06Timer Jingle\x00?\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x01\x05\x00\x00\x009\x007\x00#\x00\x00\x00\x02\x00\x00\x00\t\x00"
        b"\x00\x00\r\x007\x00!\x00\x00\x00\t\x00\x00\x00\x05\x007\x00$\x00\x00\x00\x06Timer HUD\x00?"
        b"\x19\x99\x9a\x00\x00\x00\x00\x00\x00\x01>\x00\x00\x00Y\x007\x00$\x00\x00\x00\x00\x00\x00"
        b'\x00\x06Player Hint Disable Controls\x00C"!M\xc4\xb6\xc0\x19B\xac\xfcv\x00\x00\x00\x00\x80'
        b"\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0f\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\na\x00\x00\x00[\x007\x00%\x00\x00\x00\x00\x00\x00\x00\t"
        b"StreamedAudio - Item Attainment SW\x00\x01audio/jin_itemattain.dsp\x00\x01\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00i\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    )


@pytest.mark.parametrize(
    ["layer", "area", "instance", "expected"],
    [
        (0, 0, 0, 0x00000000),
        (1, 0, 0, 0x04000000),
        (0, 1, 0, 0x00010000),
        (0, 0, 1, 0x00000001),
        (5, 2, 1, 0x14020001),
    ],
)
def test_instance_id_new(layer, area, instance, expected):
    assert InstanceId.new(layer, area, instance) == expected


@pytest.mark.parametrize(
    ["correct_type", "value", "expected"],
    [
        (_prime_enums.State, _prime_enums.State.Exited, _prime_enums.State.Exited),
        (_prime_enums.State, _echoes_enums.State.Exited, _prime_enums.State.Exited),
        (_echoes_enums.State, _prime_enums.State.Exited, _echoes_enums.State.Exited),
        (_echoes_enums.State, "EXIT", _echoes_enums.State.Exited),
        (_echoes_enums.State, _echoes_enums.State.Exited, _echoes_enums.State.Exited),
    ],
)
def test_resolve_to_enum(correct_type, value, expected):
    assert script_object._resolve_to_enum(correct_type, value) == expected


@pytest.fixture
def prime2_mlvl(prime2_asset_manager) -> Mlvl:
    # Agon Wastes
    return prime2_asset_manager.get_parsed_asset(0x42B935E4)


@pytest.fixture
def prime2_area(prime2_mlvl: Mlvl) -> Area:
    # Storage C
    return prime2_mlvl.get_area(0x5DFA984F)


# Area
@pytest.mark.parametrize("active", (False, True))
def test_add_layer(prime2_area: Area, active: bool):
    layer = prime2_area.add_layer("Test", active)
    assert layer.active == active
    assert layer.index == 2


def test_get_instance(prime2_area: Area):
    idx, name = 0x0045006B, "Pickup Object"
    inst = prime2_area.get_instance(idx)
    assert inst.name == name

    inst = prime2_area.get_instance(name)
    assert inst.id == idx


def test_remove_instance(prime2_area: Area):
    old_len = len(list(prime2_area.all_instances))
    prime2_area.remove_instance("Pickup Object")
    assert len(list(prime2_area.all_instances)) == old_len - 1


# Script Layer
def test_add_instance(prime2_area: Area):
    from retro_data_structures.properties.echoes.objects.SpecialFunction import Function, SpecialFunction

    inst = prime2_area.get_layer("Default").add_instance_with(
        SpecialFunction(
            function=Function.Darkworld,
        )
    )
    assert inst.type == SpecialFunction
    assert prime2_area.mrea.build() is not None


def test_add_memory_relay(prime2_area: Area):
    relay = prime2_area.get_layer("Default").add_memory_relay("Test")
    save = prime2_area._parent_mlvl.savw

    assert any(state["instance_id"] == relay.id for state in save.raw.memory_relays)


@pytest.mark.parametrize("name", ("Test1", "Test2"))
@pytest.mark.parametrize("active", (False, True))
def test_edit_layer(prime2_area: Area, name: str, active: bool):
    default = prime2_area.get_layer("Default")

    default.name = name
    default.active = active

    assert default.name == name
    assert default.active == active


# Script Object
def test_edit_properties(prime2_area: Area):
    from retro_data_structures.properties.echoes.objects.Pickup import Pickup

    inst = prime2_area.get_instance("Pickup Object")

    inst.name = "Test"
    assert inst.name == "Test"

    with inst.edit_properties(Pickup) as pickup:
        pickup.amount = 2


def test_edit_connections(prime2_area: Area):
    from retro_data_structures.enums.echoes import Message, State

    pickup = prime2_area.get_instance("Pickup Object")
    relay = prime2_area.get_instance("Post Pickup")

    original_connections = pickup.connections

    pickup.remove_connections_from(relay)
    assert len(pickup.connections) == len(original_connections) - 1

    pickup.add_connection(State.Arrived, Message.SetToZero, relay)
    assert set(pickup.connections) == set(original_connections)


@pytest.mark.xfail(reason="Prime 1 SCLY building is incorrect")
def test_roundtrip_prime1(prime1_scly_raw: bytes) -> None:
    decoded = SCLY.parse(prime1_scly_raw, target_game=Game.PRIME)

    encoded = SCLY.build(decoded, target_game=Game.PRIME)

    assert prime1_scly_raw == encoded
